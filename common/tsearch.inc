/**
 * Include this file to define an unrolled ternary search.
 *
 * Macros:
 *   TSEARCH_PREFIX(STRING): namespacify STRING
 *   TSEARCH_TYPE: the type of elements in the haystack
 *   TSEARCH_KEY_TYPE: the type of the needle
 *   TSEARCH_CMP(TYPE *hay, KEY_TYPE needle) -> true if *hay < or <= needle (depending on what you want)
 *   TSEARCH_NOT_FOUND(TYPE *base) -> what to return if needle is too small for the haystack.
 *   TSEARCH_LINKAGE: linkage for exposed functions.
 *   TSEARCH_HELPER_LINKAGE: linkage for internal functions.
 *
 * Generator is commented out at the end.
 */

#ifndef TSEARCH_TYPE
# error "TSEARCH_TYPE undefined"
#endif

#ifndef TSEARCH_KEY_TYPE
# error "TSEARCH_KEY_TYPE undefined"
#endif

#ifndef TSEARCH_CMP
# error "TSEARCH_CMP undefined"
#endif

#ifndef TSEARCH_PREFIX
# define TSEARCH_PREFIX(NAME) NAME
#endif

#ifndef TSEARCH_NOT_FOUND
# define TSEARCH_NOT_FOUND(X) (NULL)
#endif

#ifndef TSEARCH_LINKAGE
# ifdef __GNUC__
#  define TSEARCH_LINKAGE static __attribute__((unused, flatten))
# else
#  define TSEARCH_LINKAGE static
# endif
#endif

#ifndef TSEARCH_HELPER_LINKAGE
# ifdef __GNUC__
# define TSEARCH_HELPER_LINKAGE static __attribute__((flatten))
# else
#  define TSEARCH_HELPER_LINKAGE static inline
# endif
#endif

#define TSEARCH_BARRIER() asm volatile ("":::"memory")

#define TSEARCH_PROBE(OFFSET) do {					\
		TSEARCH_TYPE *pivot = base + (OFFSET);			\
									\
		base = (TSEARCH_CMP(pivot, needle)) ? pivot : base;	\
	} while (0)

#define TSEARCH_PROBE2(OFF1, OFF2) do {					\
		TSEARCH_TYPE *pivot1 = base + (OFF1);			\
		TSEARCH_TYPE *pivot2 = base + (OFF2);			\
									\
		base = (TSEARCH_CMP(pivot1, needle)) ? pivot1 : base;	\
		base = (TSEARCH_CMP(pivot2, needle)) ? pivot2 : base;	\
	} while (0)

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_0)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	(void)needle;
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_0)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	return TSEARCH_PREFIX(tsearch_0)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_1)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_1)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	return TSEARCH_PREFIX(tsearch_1)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_2)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_2)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 2ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_1)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_3)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(3ULL, 5ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_3)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 4ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_2)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_4)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(6ULL, 10ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_4)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 8ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_3)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_5)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(11ULL, 21ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 7ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_5)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 16ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_4)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_6)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(22ULL, 42ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(8ULL, 14ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 5ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_6)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 32ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_5)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_7)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(43ULL, 85ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(15ULL, 28ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5ULL, 10ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 3ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_7)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 64ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_6)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_8)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(86ULL, 170ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(29ULL, 57ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(10ULL, 19ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 6ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_8)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 128ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_7)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_9)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(171ULL, 341ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(57ULL, 114ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(19ULL, 38ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(7ULL, 12ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_9)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 256ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_8)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_10)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(342ULL, 682ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(114ULL, 228ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(38ULL, 76ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(13ULL, 25ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5ULL, 8ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 3ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_10)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 512ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_9)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_11)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(683ULL, 1365ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(228ULL, 455ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(76ULL, 152ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(26ULL, 50ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(9ULL, 17ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 6ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_11)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 1024ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_10)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_12)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(1366ULL, 2730ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(456ULL, 910ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(152ULL, 304ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(51ULL, 101ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(17ULL, 34ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6ULL, 11ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_12)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 2048ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_11)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_13)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(2731ULL, 5461ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(911ULL, 1820ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(304ULL, 607ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(102ULL, 202ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(34ULL, 68ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(12ULL, 22ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 8ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_13)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 4096ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_12)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_14)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(5462ULL, 10922ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1821ULL, 3641ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(607ULL, 1214ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(203ULL, 404ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(68ULL, 135ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(23ULL, 45ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(8ULL, 15ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 5ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_14)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 8192ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_13)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_15)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(10923ULL, 21845ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3641ULL, 7282ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1214ULL, 2427ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(405ULL, 809ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(135ULL, 270ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(45ULL, 90ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(15ULL, 30ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5ULL, 10ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 3ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_15)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 16384ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_14)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_16)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(21846ULL, 43690ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(7282ULL, 14564ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2428ULL, 4854ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(810ULL, 1618ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(270ULL, 540ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(90ULL, 180ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(30ULL, 60ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(10ULL, 20ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 6ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_16)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 32768ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_15)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_17)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(43691ULL, 87381ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(14564ULL, 29127ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4855ULL, 9709ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1619ULL, 3236ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(540ULL, 1079ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(180ULL, 360ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(60ULL, 120ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(20ULL, 40ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(7ULL, 13ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_17)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 65536ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_16)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_18)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(87382ULL, 174762ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(29128ULL, 58254ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(9710ULL, 19418ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3237ULL, 6473ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1079ULL, 2158ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(360ULL, 719ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(120ULL, 240ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(40ULL, 80ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(14ULL, 26ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5ULL, 9ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 3ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_18)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 131072ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_17)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_19)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(174763ULL, 349525ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(58255ULL, 116508ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(19419ULL, 38836ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6473ULL, 12946ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2158ULL, 4315ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(720ULL, 1438ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(240ULL, 480ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(80ULL, 160ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(27ULL, 53ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(9ULL, 18ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 6ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_19)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 262144ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_18)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_20)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(349526ULL, 699050ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(116509ULL, 233017ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(38837ULL, 77672ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(12946ULL, 25891ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4316ULL, 8630ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1439ULL, 2877ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(480ULL, 959ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(160ULL, 320ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(54ULL, 106ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(18ULL, 36ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6ULL, 12ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_20)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 524288ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_19)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_21)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(699051ULL, 1398101ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(233017ULL, 466034ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(77673ULL, 155344ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(25891ULL, 51782ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(8631ULL, 17260ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2877ULL, 5754ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(959ULL, 1918ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(320ULL, 639ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(107ULL, 213ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(36ULL, 71ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(12ULL, 24ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 8ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_21)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 1048576ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_20)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_22)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(1398102ULL, 2796202ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(466034ULL, 932068ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(155345ULL, 310689ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(51782ULL, 103563ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(17261ULL, 34521ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5754ULL, 11507ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1918ULL, 3836ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(640ULL, 1278ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(214ULL, 426ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(72ULL, 142ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(24ULL, 48ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(8ULL, 16ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 5ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_22)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 2097152ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_21)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_23)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(2796203ULL, 5592405ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(932068ULL, 1864135ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(310690ULL, 621378ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(103564ULL, 207126ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(34522ULL, 69042ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(11508ULL, 23014ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3836ULL, 7672ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1279ULL, 2557ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(427ULL, 852ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(143ULL, 284ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(48ULL, 95ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(16ULL, 32ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6ULL, 10ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_23)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 4194304ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_22)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_24)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(5592406ULL, 11184810ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1864136ULL, 3728270ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(621379ULL, 1242757ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(207127ULL, 414252ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(69043ULL, 138084ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(23015ULL, 46028ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(7672ULL, 15343ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2558ULL, 5114ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(853ULL, 1705ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(285ULL, 568ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(95ULL, 190ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(32ULL, 63ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(11ULL, 21ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 7ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_24)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 8388608ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_23)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_25)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(11184811ULL, 22369621ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3728271ULL, 7456540ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1242757ULL, 2485514ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(414253ULL, 828504ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(138085ULL, 276168ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(46029ULL, 92056ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(15343ULL, 30686ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5115ULL, 10228ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1705ULL, 3410ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(569ULL, 1136ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(190ULL, 379ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(64ULL, 126ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(22ULL, 42ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(8ULL, 14ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 5ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_25)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 16777216ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_24)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_26)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(22369622ULL, 44739242ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(7456541ULL, 14913081ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2485514ULL, 4971027ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(828505ULL, 1657009ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(276169ULL, 552336ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(92057ULL, 184112ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(30686ULL, 61371ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(10229ULL, 20457ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3410ULL, 6819ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1137ULL, 2273ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(379ULL, 758ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(127ULL, 252ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(43ULL, 84ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(15ULL, 28ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5ULL, 10ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 3ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_26)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 33554432ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_25)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_27)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(44739243ULL, 89478485ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(14913081ULL, 29826162ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4971027ULL, 9942054ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1657009ULL, 3314018ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(552337ULL, 1104672ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(184113ULL, 368224ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(61371ULL, 122742ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(20457ULL, 40914ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6819ULL, 13638ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2273ULL, 4546ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(758ULL, 1515ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(253ULL, 505ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(85ULL, 168ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(29ULL, 56ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(10ULL, 19ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4ULL, 6ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(2ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_27)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 67108864ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_26)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_28)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(89478486ULL, 178956970ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(29826162ULL, 59652324ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(9942054ULL, 19884108ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3314018ULL, 6628036ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1104673ULL, 2209345ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(368225ULL, 736448ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(122742ULL, 245483ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(40914ULL, 81828ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(13638ULL, 27276ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4546ULL, 9092ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1516ULL, 3030ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(506ULL, 1010ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(169ULL, 337ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(57ULL, 112ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(19ULL, 38ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(7ULL, 12ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_28)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 134217728ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_27)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_29)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(178956971ULL, 357913941ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(59652324ULL, 119304647ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(19884108ULL, 39768216ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6628036ULL, 13256072ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2209346ULL, 4418690ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(736449ULL, 1472897ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(245483ULL, 490966ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(81828ULL, 163655ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(27276ULL, 54552ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(9092ULL, 18184ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3031ULL, 6061ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1011ULL, 2020ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(337ULL, 674ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(113ULL, 224ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(38ULL, 75ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(13ULL, 25ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(5ULL, 8ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 3ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_29)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 268435456ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_28)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_30)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(357913942ULL, 715827882ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(119304648ULL, 238609294ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(39768216ULL, 79536432ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(13256072ULL, 26512144ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4418691ULL, 8837381ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1472897ULL, 2945794ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(490966ULL, 981931ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(163656ULL, 327310ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(54552ULL, 109104ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(18184ULL, 36368ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6062ULL, 12122ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2021ULL, 4041ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(674ULL, 1347ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(225ULL, 449ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(75ULL, 150ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(25ULL, 50ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(9ULL, 16ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(3ULL, 6ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1ULL, 2ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_30)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 536870912ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_29)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_31)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
	TSEARCH_PROBE2(715827883ULL, 1431655765ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(238609295ULL, 477218588ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(79536432ULL, 159072863ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(26512144ULL, 53024288ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(8837382ULL, 17674762ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2945794ULL, 5891588ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(981932ULL, 1963862ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(327311ULL, 654621ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(109104ULL, 218207ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(36368ULL, 72736ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(12123ULL, 24245ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(4041ULL, 8082ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(1347ULL, 2694ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(449ULL, 898ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(150ULL, 299ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(50ULL, 100ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(17ULL, 33ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(6ULL, 11ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE2(2ULL, 4ULL);
	TSEARCH_BARRIER();
	TSEARCH_PROBE(1ULL);
	return base;
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_31)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 1073741824ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_30)(base, n, needle);
}

TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_32)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - 2147483648ULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_31)(base, n, needle);
}

typedef TSEARCH_TYPE *(TSEARCH_PREFIX(tsearch_helper_t))(TSEARCH_TYPE *, size_t, TSEARCH_KEY_TYPE);

struct TSEARCH_PREFIX(tsearch_entry) {
	TSEARCH_PREFIX(tsearch_helper_t) *exact;
	TSEARCH_PREFIX(tsearch_helper_t) *upto;
};

struct TSEARCH_PREFIX(tsearch_entry) TSEARCH_PREFIX(tsearch_table)[] = {
	{ .exact = TSEARCH_PREFIX(tsearch_0), .upto = TSEARCH_PREFIX(tsearch_upto_0) },
	{ .exact = TSEARCH_PREFIX(tsearch_1), .upto = TSEARCH_PREFIX(tsearch_upto_1) },
	{ .exact = TSEARCH_PREFIX(tsearch_2), .upto = TSEARCH_PREFIX(tsearch_upto_2) },
	{ .exact = TSEARCH_PREFIX(tsearch_3), .upto = TSEARCH_PREFIX(tsearch_upto_3) },
	{ .exact = TSEARCH_PREFIX(tsearch_4), .upto = TSEARCH_PREFIX(tsearch_upto_4) },
	{ .exact = TSEARCH_PREFIX(tsearch_5), .upto = TSEARCH_PREFIX(tsearch_upto_5) },
	{ .exact = TSEARCH_PREFIX(tsearch_6), .upto = TSEARCH_PREFIX(tsearch_upto_6) },
	{ .exact = TSEARCH_PREFIX(tsearch_7), .upto = TSEARCH_PREFIX(tsearch_upto_7) },
	{ .exact = TSEARCH_PREFIX(tsearch_8), .upto = TSEARCH_PREFIX(tsearch_upto_8) },
	{ .exact = TSEARCH_PREFIX(tsearch_9), .upto = TSEARCH_PREFIX(tsearch_upto_9) },
	{ .exact = TSEARCH_PREFIX(tsearch_10), .upto = TSEARCH_PREFIX(tsearch_upto_10) },
	{ .exact = TSEARCH_PREFIX(tsearch_11), .upto = TSEARCH_PREFIX(tsearch_upto_11) },
	{ .exact = TSEARCH_PREFIX(tsearch_12), .upto = TSEARCH_PREFIX(tsearch_upto_12) },
	{ .exact = TSEARCH_PREFIX(tsearch_13), .upto = TSEARCH_PREFIX(tsearch_upto_13) },
	{ .exact = TSEARCH_PREFIX(tsearch_14), .upto = TSEARCH_PREFIX(tsearch_upto_14) },
	{ .exact = TSEARCH_PREFIX(tsearch_15), .upto = TSEARCH_PREFIX(tsearch_upto_15) },
	{ .exact = TSEARCH_PREFIX(tsearch_16), .upto = TSEARCH_PREFIX(tsearch_upto_16) },
	{ .exact = TSEARCH_PREFIX(tsearch_17), .upto = TSEARCH_PREFIX(tsearch_upto_17) },
	{ .exact = TSEARCH_PREFIX(tsearch_18), .upto = TSEARCH_PREFIX(tsearch_upto_18) },
	{ .exact = TSEARCH_PREFIX(tsearch_19), .upto = TSEARCH_PREFIX(tsearch_upto_19) },
	{ .exact = TSEARCH_PREFIX(tsearch_20), .upto = TSEARCH_PREFIX(tsearch_upto_20) },
	{ .exact = TSEARCH_PREFIX(tsearch_21), .upto = TSEARCH_PREFIX(tsearch_upto_21) },
	{ .exact = TSEARCH_PREFIX(tsearch_22), .upto = TSEARCH_PREFIX(tsearch_upto_22) },
	{ .exact = TSEARCH_PREFIX(tsearch_23), .upto = TSEARCH_PREFIX(tsearch_upto_23) },
	{ .exact = TSEARCH_PREFIX(tsearch_24), .upto = TSEARCH_PREFIX(tsearch_upto_24) },
	{ .exact = TSEARCH_PREFIX(tsearch_25), .upto = TSEARCH_PREFIX(tsearch_upto_25) },
	{ .exact = TSEARCH_PREFIX(tsearch_26), .upto = TSEARCH_PREFIX(tsearch_upto_26) },
	{ .exact = TSEARCH_PREFIX(tsearch_27), .upto = TSEARCH_PREFIX(tsearch_upto_27) },
	{ .exact = TSEARCH_PREFIX(tsearch_28), .upto = TSEARCH_PREFIX(tsearch_upto_28) },
	{ .exact = TSEARCH_PREFIX(tsearch_29), .upto = TSEARCH_PREFIX(tsearch_upto_29) },
	{ .exact = TSEARCH_PREFIX(tsearch_30), .upto = TSEARCH_PREFIX(tsearch_upto_30) },
	{ .exact = TSEARCH_PREFIX(tsearch_31), .upto = TSEARCH_PREFIX(tsearch_upto_31) },
	{ .upto = TSEARCH_PREFIX(tsearch_upto_32) }
};

TSEARCH_LINKAGE TSEARCH_PREFIX(tsearch_helper_t) *
TSEARCH_PREFIX(find_tsearch)(size_t n)
{
	struct TSEARCH_PREFIX(tsearch_entry) *entry;
	size_t bits_per_word = CHAR_BIT * sizeof(unsigned long long);
	size_t lb;

	if (n <= 1) {
		return TSEARCH_PREFIX(tsearch_0);
	}

	lb = bits_per_word - __builtin_clzll(n - 1);
	if (lb > 32ULL) {
		return NULL;
	}

	entry = &TSEARCH_PREFIX(tsearch_table)[lb];
	return ((n & (n - 1)) == 0) ? entry->exact : entry->upto;
}

TSEARCH_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_with_helper)(TSEARCH_PREFIX(tsearch_helper_t) *helper, TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	if (n == 0 || !TSEARCH_CMP(base, needle)) {
		return TSEARCH_NOT_FOUND(base);
	}

	return helper(base, n, needle);
}

TSEARCH_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{
	size_t bits_per_word = CHAR_BIT * sizeof(unsigned long long);

	if (n == 0 || !TSEARCH_CMP(base, needle)) {
		return TSEARCH_NOT_FOUND(base);
	}

	if (n == 1) {
		return base;
	}

	switch (bits_per_word - __builtin_clzll(n - 1)) {
	case 0:
		return TSEARCH_PREFIX(tsearch_upto_0)(base, n, needle);
	case 1:
		return TSEARCH_PREFIX(tsearch_upto_1)(base, n, needle);
	case 2:
		return TSEARCH_PREFIX(tsearch_upto_2)(base, n, needle);
	case 3:
		return TSEARCH_PREFIX(tsearch_upto_3)(base, n, needle);
	case 4:
		return TSEARCH_PREFIX(tsearch_upto_4)(base, n, needle);
	case 5:
		return TSEARCH_PREFIX(tsearch_upto_5)(base, n, needle);
	case 6:
		return TSEARCH_PREFIX(tsearch_upto_6)(base, n, needle);
	case 7:
		return TSEARCH_PREFIX(tsearch_upto_7)(base, n, needle);
	case 8:
		return TSEARCH_PREFIX(tsearch_upto_8)(base, n, needle);
	case 9:
		return TSEARCH_PREFIX(tsearch_upto_9)(base, n, needle);
	case 10:
		return TSEARCH_PREFIX(tsearch_upto_10)(base, n, needle);
	case 11:
		return TSEARCH_PREFIX(tsearch_upto_11)(base, n, needle);
	case 12:
		return TSEARCH_PREFIX(tsearch_upto_12)(base, n, needle);
	case 13:
		return TSEARCH_PREFIX(tsearch_upto_13)(base, n, needle);
	case 14:
		return TSEARCH_PREFIX(tsearch_upto_14)(base, n, needle);
	case 15:
		return TSEARCH_PREFIX(tsearch_upto_15)(base, n, needle);
	case 16:
		return TSEARCH_PREFIX(tsearch_upto_16)(base, n, needle);
	case 17:
		return TSEARCH_PREFIX(tsearch_upto_17)(base, n, needle);
	case 18:
		return TSEARCH_PREFIX(tsearch_upto_18)(base, n, needle);
	case 19:
		return TSEARCH_PREFIX(tsearch_upto_19)(base, n, needle);
	case 20:
		return TSEARCH_PREFIX(tsearch_upto_20)(base, n, needle);
	case 21:
		return TSEARCH_PREFIX(tsearch_upto_21)(base, n, needle);
	case 22:
		return TSEARCH_PREFIX(tsearch_upto_22)(base, n, needle);
	case 23:
		return TSEARCH_PREFIX(tsearch_upto_23)(base, n, needle);
	case 24:
		return TSEARCH_PREFIX(tsearch_upto_24)(base, n, needle);
	case 25:
		return TSEARCH_PREFIX(tsearch_upto_25)(base, n, needle);
	case 26:
		return TSEARCH_PREFIX(tsearch_upto_26)(base, n, needle);
	case 27:
		return TSEARCH_PREFIX(tsearch_upto_27)(base, n, needle);
	case 28:
		return TSEARCH_PREFIX(tsearch_upto_28)(base, n, needle);
	case 29:
		return TSEARCH_PREFIX(tsearch_upto_29)(base, n, needle);
	case 30:
		return TSEARCH_PREFIX(tsearch_upto_30)(base, n, needle);
	case 31:
		return TSEARCH_PREFIX(tsearch_upto_31)(base, n, needle);
	case 32:
		return TSEARCH_PREFIX(tsearch_upto_32)(base, n, needle);
	default:
		assert(0 && "Unexpectedly large input for tsearch (max 4294967296)");
		return NULL;
	}
}

#undef TSEARCH_PROBE2
#undef TSEARCH_PROBE
#undef TSEARCH_BARRIER
#undef TSEARCH_HELPER_LINKAGE
#undef TSEARCH_LINKAGE
#undef TSEARCH_PREFIX
#undef TSEARCH_NOT_FOUND
#undef TSEARCH_CMP
#undef TSEARCH_KEY_TYPE
#undef TSEARCH_TYPE

/*
tsearch-generator.lisp:

(defun emit-tsearch-body (n)
  (when (> n 1)
    (let ((next (ceiling n 3)))
      (if (= next (- n next))
	  (format t "~cTSEARCH_PROBE(~DULL);~%" #\Tab next)
	  (format t "~cTSEARCH_PROBE2(~DULL, ~DULL);~%" #\Tab next (- n next)))
      (when (> next 1)
	(format t "~cTSEARCH_BARRIER();~%" #\Tab)
	(emit-tsearch-body next)))))

(defun emit-prologue ()
  (format t "~
#ifndef TSEARCH_TYPE
# error \"TSEARCH_TYPE undefined\"
#endif

#ifndef TSEARCH_KEY_TYPE
# error \"TSEARCH_KEY_TYPE undefined\"
#endif

#ifndef TSEARCH_CMP
# error \"TSEARCH_CMP undefined\"
#endif

#ifndef TSEARCH_PREFIX
# define TSEARCH_PREFIX(NAME) NAME
#endif

#ifndef TSEARCH_NOT_FOUND
# define TSEARCH_NOT_FOUND(X) (NULL)
#endif

#ifndef TSEARCH_LINKAGE
# ifdef __GNUC__
#  define TSEARCH_LINKAGE static __attribute__((unused, flatten))
# else
#  define TSEARCH_LINKAGE static
# endif
#endif

#ifndef TSEARCH_HELPER_LINKAGE
# ifdef __GNUC__
# define TSEARCH_HELPER_LINKAGE static __attribute__((flatten))
# else
#  define TSEARCH_HELPER_LINKAGE static inline
# endif
#endif

#define TSEARCH_BARRIER() asm volatile (\"\":::\"memory\")

#define TSEARCH_PROBE(OFFSET) do {					\\
		TSEARCH_TYPE *pivot = base + (OFFSET);			\\
									\\
		base = (TSEARCH_CMP(pivot, needle)) ? pivot : base;	\\
	} while (0)

#define TSEARCH_PROBE2(OFF1, OFF2) do {					\\
		TSEARCH_TYPE *pivot1 = base + (OFF1);			\\
		TSEARCH_TYPE *pivot2 = base + (OFF2);			\\
									\\
		base = (TSEARCH_CMP(pivot1, needle)) ? pivot1 : base;	\\
		base = (TSEARCH_CMP(pivot2, needle)) ? pivot2 : base;	\\
	} while (0)
"))

(defun emit-epilogue ()
  (format t "
#undef TSEARCH_PROBE2
#undef TSEARCH_PROBE
#undef TSEARCH_BARRIER
#undef TSEARCH_HELPER_LINKAGE
#undef TSEARCH_LINKAGE
#undef TSEARCH_PREFIX
#undef TSEARCH_NOT_FOUND
#undef TSEARCH_CMP
#undef TSEARCH_KEY_TYPE
#undef TSEARCH_TYPE
"))

(defun emit-tsearch-size (lb)
  (format t "
TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_~D)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	(void)n;
"
	  lb)
  (if (zerop lb)
      (format t "	(void)needle;
")
      (emit-tsearch-body (ash 1 lb)))
  (format t "	return base;
}
"))

(defun emit-tsearch-approx-size (lb)
  (when (< lb 2)
    (format t "
TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_~D)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	return TSEARCH_PREFIX(tsearch_~D)(base, n, needle);
}
"
	    lb lb)
    (return-from emit-tsearch-approx-size))
  (format t "
TSEARCH_HELPER_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_upto_~D)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	TSEARCH_PROBE(n - ~DULL);
	TSEARCH_BARRIER();
	return TSEARCH_PREFIX(tsearch_~D)(base, n, needle);
}
"
	  lb (ash 1 (1- lb)) (1- lb)))

(defun emit-tsearch-table (max-lb)
  (format t "
typedef TSEARCH_TYPE *(TSEARCH_PREFIX(tsearch_helper))(TSEARCH_TYPE *, size_t, TSEARCH_KEY_TYPE);

struct TSEARCH_PREFIX(tsearch_entry) {
	TSEARCH_PREFIX(tsearch_helper) *exact;
	TSEARCH_PREFIX(tsearch_helper) *upto;
};

struct TSEARCH_PREFIX(tsearch_entry) TSEARCH_PREFIX(tsearch_table)[] = {
~{	{ .exact = TSEARCH_PREFIX(tsearch_~D), .upto = TSEARCH_PREFIX(tsearch_upto_~D) },~^~%~}
	{ .upto = TSEARCH_PREFIX(tsearch_upto_~D) }
};
"
	  (loop for i below max-lb append (list i i))
	  max-lb))

(defun emit-find-tsearch (max-lb)
  (format t "
TSEARCH_LINKAGE TSEARCH_PREFIX(tsearch_helper) *
TSEARCH_PREFIX(find_tsearch)(size_t n)
{
	struct TSEARCH_PREFIX(tsearch_entry) *entry;
	size_t bits_per_word = CHAR_BIT * sizeof(unsigned long long);
	size_t lb;

	if (n <= 1) {
		return TSEARCH_PREFIX(tsearch_0);
	}

	lb = bits_per_word - __builtin_clzll(n - 1);
	if (lb > ~DULL) {
		return NULL;
	}

	entry = &TSEARCH_PREFIX(tsearch_table)[lb];
	return ((n & (n - 1)) == 0) ? entry->exact : entry->upto;
}
"
	  max-lb))

(defun emit-tsearch (max-lb)
  (emit-prologue)
  (dotimes (i max-lb)
    (emit-tsearch-size i)
    (emit-tsearch-approx-size i))
  (emit-tsearch-approx-size max-lb)
  (emit-tsearch-table max-lb)
  (emit-find-tsearch max-lb)
  (format t "
TSEARCH_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch_with_helper)(TSEARCH_PREFIX(tsearch_helper) *helper, TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{

	if (n == 0 || !TSEARCH_CMP(base, needle)) {
		return TSEARCH_NOT_FOUND(base);
	}

	return helper(base, n, needle);
}

TSEARCH_LINKAGE TSEARCH_TYPE *
TSEARCH_PREFIX(tsearch)(TSEARCH_TYPE *base, size_t n, TSEARCH_KEY_TYPE needle)
{
	size_t bits_per_word = CHAR_BIT * sizeof(unsigned long long);

	if (n == 0 || !TSEARCH_CMP(base, needle)) {
		return TSEARCH_NOT_FOUND(base);
	}

	if (n == 1) {
		return base;
	}

	switch (bits_per_word - __builtin_clzll(n - 1)) {")
  (loop for i from 0 upto max-lb do
       (format t "
	case ~D:
		return TSEARCH_PREFIX(tsearch_upto_~D)(base, n, needle);"
	       i i))
  (format t "
	default:
		assert(0 && \"Unexpectedly large input for tsearch (max ~D)\");
		return NULL;
	}
}
"
	(ash 1 max-lb))
  (emit-epilogue))

 */
